/*********************************************************************
This is a Time Bomb using a Monochrome OLED based on SH1106 drivers.

Written by Xavier Perseguers
BSD license, check license.txt for more information
*********************************************************************/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <SH1106.h>

/* Mapping:
 *  
 * GND => GND
 * 5V  => VDD
 *  9  => SDA (D1/MOSI)
 * 10  => SCK (D0/CLK)
 * 11  => DC
 * 12  => RES
 * 13  => CS
 */

// If using software SPI (the default case):
#define OLED_MOSI   9
#define OLED_CLK   10
#define OLED_DC    11
#define OLED_RESET 12
#define OLED_CS    13
Adafruit_SH1106 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

#define SWITCH      2
#define LED_GREEN   3
#define LED_RED     4

#define WIRE_YELLOW 6
#define WIRE_GREEN  7

/* Uncomment this block to use hardware SPI
#define OLED_DC     6
#define OLED_CS     7
#define OLED_RESET  8
Adafruit_SH1106 display(OLED_DC, OLED_RESET, OLED_CS);
*/

static const unsigned char PROGMEM arrow[] =
{
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x7f,0xfc,0x0,0x0,
0x0,0x0,0x0,0x0,0x7f,0xff,0xff,0xe0,
0x0,0x0,0x0,0x0,0x3f,0xff,0xff,0xe0,
0x0,0x0,0x0,0x0,0x1f,0xff,0xff,0xe0,
0x0,0x0,0x0,0x0,0xf,0xff,0xff,0xc0,
0x0,0x0,0x0,0x0,0x7,0xff,0xff,0x80,
0x0,0x0,0x0,0x0,0xf,0xff,0xff,0x0,
0x0,0x0,0x0,0x0,0x1f,0xff,0xff,0x0,
0x0,0x0,0x0,0x0,0x7f,0xff,0xfe,0x0,
0x0,0x0,0x0,0x0,0xff,0xff,0xfc,0x0,
0x0,0x0,0x0,0x3,0xff,0xff,0xf8,0x0,
0x0,0x0,0x0,0x7,0xff,0xff,0xf0,0x0,
0x0,0x0,0x0,0x1f,0xff,0xff,0xe0,0x0,
0x0,0x0,0x0,0x7f,0xff,0xff,0xe0,0x0,
0x0,0x0,0x1,0xff,0xff,0xff,0xc0,0x0,
0x0,0x0,0x7,0xff,0xff,0xff,0x80,0x0,
0x0,0x0,0xf,0xff,0xfc,0x7f,0x0,0x0,
0x0,0x0,0x3f,0xff,0xc0,0x3e,0x0,0x0,
0x0,0x0,0xff,0xfe,0x0,0x3c,0x0,0x0,
0x0,0x3,0xff,0xe0,0x0,0x3c,0x0,0x0,
0x0,0xf,0xff,0x0,0x0,0x38,0x0,0x0,
0x0,0x3f,0xf8,0x0,0x0,0x30,0x0,0x0,
0x0,0xff,0xc0,0x0,0x0,0x0,0x0,0x0,
0x3,0xff,0x0,0x0,0x0,0x0,0x0,0x0,
0xf,0xf8,0x0,0x0,0x0,0x0,0x0,0x0,
0x1f,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,
0xe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};

static const unsigned char PROGMEM bang[] =
{
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x7f,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xbf,0xff,0xfe,0x7f,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x9f,0xf7,0xfc,0x7f,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x9f,0xf7,0xf8,0x7f,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x9f,0xe7,0xf8,0x7f,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf,0xe3,0xf0,0x7f,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xcf,0xff,0xff,0xff,0x7,0xc3,0xe0,0x7f,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xe3,0xff,0xff,0xff,0x3,0xc3,0xc0,0x7f,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xe1,0xff,0xff,0xfe,0x1,0x81,0x80,0x7f,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xf0,0xff,0xff,0xfe,0x0,0x0,0x0,0x38,0x1f,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xf0,0x3f,0xff,0xfc,0x20,0x0,0x0,0x0,0xf,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xf0,0x1f,0xff,0xf8,0x0,0x10,0x6,0x0,0x7,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xf8,0x7,0xff,0xf0,0xa0,0x40,0x1e,0x1f,0xc7,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xf9,0x1,0xff,0xe0,0x85,0x0,0x7e,0x7f,0xc4,0x3f,0xff,0xff,
0xff,0xff,0xff,0xff,0xf8,0x0,0x7f,0xc0,0x10,0x0,0xfe,0xff,0x80,0x1f,0xff,0xff,
0xff,0xff,0xff,0xff,0xf8,0xc0,0x0,0x1,0x40,0x30,0x7f,0xff,0x81,0x1f,0xff,0xff,
0xff,0xff,0xff,0xff,0xf8,0x90,0x0,0x4,0x0,0x78,0x7f,0xf8,0x3,0x3f,0xff,0xff,
0xff,0xff,0xff,0xff,0xf8,0x50,0x0,0x0,0x0,0xfc,0x7f,0xf0,0xf,0x9f,0xff,0xff,
0xff,0xff,0xff,0xe0,0x0,0x6,0x0,0x0,0x3,0xfe,0x3f,0xf0,0x3f,0x1f,0xff,0xff,
0xff,0xff,0xff,0xe0,0x0,0x50,0x80,0x40,0x3,0xff,0x3f,0xf0,0xfe,0x3f,0xff,0xff,
0xff,0xff,0xff,0xf8,0x1,0x2,0x80,0x40,0x61,0xff,0xbf,0xf1,0xfe,0x7f,0xff,0xff,
0xff,0xff,0xff,0xfc,0x1c,0x28,0x0,0xf,0xf1,0xff,0xff,0xf0,0xbe,0x7f,0xff,0xff,
0xff,0xff,0xff,0xff,0x1,0xa0,0x0,0xf,0xf9,0xff,0xff,0xf8,0x3e,0x7f,0xff,0xff,
0xff,0xff,0xff,0xff,0x86,0x0,0xe,0xf,0xf8,0xf9,0xff,0xf8,0x3e,0x7f,0xff,0xff,
0xff,0xff,0xff,0xff,0xc0,0xc0,0xff,0x8f,0x3c,0xf8,0xff,0xfc,0x7e,0x7f,0xff,0xff,
0xff,0xff,0xff,0xff,0xc2,0x3,0xff,0x8f,0x3e,0x7c,0x3f,0xff,0xfc,0x7f,0xff,0xff,
0xff,0xff,0xff,0xff,0x0,0xf,0xff,0xcf,0x9f,0x7c,0x1f,0xff,0xfc,0x1f,0xff,0xff,
0xff,0xff,0xff,0xf0,0x5,0x1f,0xff,0xcf,0x8f,0xfe,0xf,0x3f,0xf8,0xbf,0xff,0xff,
0xff,0xff,0xfc,0x0,0x34,0x7f,0x9f,0xc7,0x87,0xfe,0x63,0x1f,0xe3,0xff,0xff,0xff,
0xff,0xff,0x80,0x0,0xd6,0x7e,0xf,0x87,0x8f,0xfe,0x11,0x80,0x7,0xff,0xff,0xff,
0xff,0xff,0x80,0xe,0x1e,0x3e,0x4f,0x87,0xff,0xfe,0x1c,0x0,0x1f,0xff,0xff,0xff,
0xff,0xff,0xf8,0x1,0xc3,0x3e,0xf,0xff,0xff,0xf0,0x6,0xc,0x1f,0xff,0xff,0xff,
0xff,0xff,0xff,0x80,0xa,0x9f,0x1f,0xff,0xf9,0xf8,0xa,0x8c,0xf,0xff,0xff,0xff,
0xff,0xff,0xff,0xe0,0x8,0x9f,0x3f,0xff,0xe0,0xfc,0x48,0x0,0x3,0xff,0xff,0xff,
0xff,0xff,0xff,0xfc,0xf,0xf,0xff,0xff,0xe4,0xfc,0x20,0x0,0x0,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0x5,0x4f,0xff,0xff,0xe4,0x60,0x0,0x7f,0x80,0x3f,0xff,0xff,
0xff,0xff,0xff,0xff,0x85,0x4f,0xfb,0xff,0xe2,0x0,0x81,0xff,0xf8,0xf,0xff,0xff,
0xff,0xff,0xff,0xff,0x1c,0x27,0xe1,0xff,0xe1,0xa,0x7,0xff,0xff,0x7,0xff,0xff,
0xff,0xff,0xff,0xfe,0x13,0xa7,0xc1,0xff,0xc6,0xa3,0xf,0xff,0xff,0xe7,0xff,0xff,
0xff,0xff,0xff,0xf8,0x2,0x23,0xe1,0xff,0x8a,0xa0,0xf,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xc0,0x2,0xf3,0xe7,0xf2,0x1a,0x81,0x1f,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0x8f,0x83,0x13,0xff,0xf0,0x2a,0x1c,0x1f,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xf1,0x59,0xff,0xc0,0xa1,0x40,0x1f,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xf1,0x9,0xff,0x82,0x85,0x0,0x1f,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xf0,0x28,0xfc,0x18,0xc0,0x0,0x1f,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xf1,0xac,0x0,0x2b,0x0,0x0,0xf,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xf0,0xa0,0x1,0xb8,0x0,0x3c,0xf,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xe3,0x80,0x0,0x84,0x0,0x3f,0xf,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xc0,0x0,0x0,0x14,0x38,0x7f,0x87,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xc0,0xf,0xf0,0x10,0x7c,0x7f,0xc7,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0x80,0xff,0xfc,0x10,0xfe,0x7f,0xe7,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0x3,0xff,0xff,0x0,0xfe,0x7f,0xf3,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xfe,0xf,0xff,0xff,0x81,0xfe,0x7f,0xfb,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xfc,0x3f,0xff,0xff,0xc1,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xf8,0xff,0xff,0xff,0xc3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xf3,0xff,0xff,0xff,0xe3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xf7,0xff,0xff,0xff,0xf7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
};

#if (SH1106_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SH1106.h!");
#endif

int switchState = 0;
int timer = 2000;
int timerStep = 4;  // 4 = normal speed
int bombEnabled = 0;

void setup() {
  pinMode(SWITCH, INPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_RED, OUTPUT);
  pinMode(WIRE_YELLOW, INPUT);
  pinMode(WIRE_GREEN, INPUT);

  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SH1106_SWITCHCAPVCC);
  // init done
  
  // clear the default buffer (Adafruit logo)
  display.clearDisplay();

  // turn on green LED
  digitalWrite(LED_GREEN, HIGH);

  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 12);
  display.println("Don't\npress");
  display.drawBitmap(64, 0, arrow, 64, 33, 1);
  
  display.display();
}

void loop() {
  if (bombEnabled) {
    display.clearDisplay();
    if (digitalRead(WIRE_GREEN) == LOW) {
      // green wire is disconnected, great!
      stopBomb();
      digitalWrite(LED_GREEN, HIGH);
      digitalWrite(LED_RED, LOW);
      return;
    }
    if (digitalRead(WIRE_YELLOW) == LOW) {
      // yellow wire is disconnected, bad idea ^^
      timerStep = 20; // accelerate the timer's pace
    }
  
    if (timer > timerStep) {
      timer -= timerStep;
      printTimer();
      delay(10);
    } else {
      display.drawBitmap(0, 0, bang, 128, 64, 1);
      display.display();
      // switch off red LED
      digitalWrite(LED_RED, LOW);
      delay(5000);  // not really needed but why keep refreshing the display?
    }
  } else {
    switchState = digitalRead(SWITCH);
    if (switchState == HIGH) {
      startBomb();
    } else {
      delay(100);
    }
  }
}

void startBomb() {
  // blink green LED
  for (int i=0; i<7; i++) {
    digitalWrite(LED_GREEN, i % 2 == 0 ? LOW : HIGH);
    delay(300);
  }

  // turn on red LED (green is off since odd number of cycles while blinking)
  digitalWrite(LED_RED, HIGH);

  display.clearDisplay();
  display.setTextSize(3); // char: width=17, height=21
  display.setTextColor(WHITE);
  printTimer();
  bombEnabled = 1;

  // still wait a bit (gnark gnark gnark)
  delay(2000);
}

void stopBomb() {
  bombEnabled = 0;
}

void printTimer() {
  int hundredths = timer % 100;
  int seconds = (timer - hundredths) / 100;

  display.setCursor(21, 20);
  if (seconds < 10) display.print("0");
  display.print(seconds);
  display.print(":");
  if (hundredths < 10) display.print("0");
  display.print(hundredths);
  display.display();
}
